{"version":3,"sources":["imgs/proflephotos/portfolioPhoto2.jpg","pages/home.js","pages/contact.js","pages/experience.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Home","id","className","src","portfolioPhoto","React","Component","Contact","Experience","class","App","to","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,6C,8NCIrCC,E,uKAEE,OACI,6BACI,4BAAQC,GAAG,cACP,yBAAKC,UAAU,UACX,yBAAKC,IAAMC,IAAgBF,UAAU,iBACrC,wBAAID,GAAG,WAAP,aACA,wBAAIA,GAAG,gBAAP,wBAGR,yBAAKC,UAAU,eACX,yBAAKA,UAAU,YAAYD,GAAG,oBAC1B,wBAAIA,GAAG,iBAAP,YACA,yBAAKC,UAAU,eAAeD,GAAG,iBAAjC,uVAKA,yBAAKC,UAAU,wB,GAnBpBG,IAAMC,WCDnBC,E,uKAEE,OACI,6BACI,6C,GAJMF,IAAMC,WCAtBE,E,uKAEE,OACI,yBAAKC,MAAM,aACP,yBAAKA,MAAM,8BAEP,yBAAKA,MAAM,0BAAyBR,GAAG,qBACnC,4BAAI,oEACJ,4BAAI,kFACJ,iCACI,qKACA,2IAFJ,IAEyH,6BACrH,4HAHJ,IAG0G,6BACtG,wJAJJ,IAIsI,6BAClI,sNALJ,IAKoM,6BAChM,yKANJ,IAMuJ,6BACnJ,oOAKZ,yBAAKQ,MAAM,8BACP,yBAAKA,MAAM,0BAA0BR,GAAG,mBACpC,kDACA,4BAAI,uFACJ,6BACI,iCACI,sHADJ,IACoG,6BAChG,oKAFJ,IAEkJ,6BAC9I,2HAAoG,6BACpG,6FAJJ,IAI2E,6BACvE,mGALJ,IAKiF,6BAC7E,+IANJ,IAM6H,8BAE7H,6BAAK,+EACL,0GAC0E,6BAD1E,6FAE8F,6BAF9F,0GAG2G,6BAH3G,8FAI+F,6BAJ/F,kHAKmH,6BALnH,kHAMmH,6BANnH,mHAOoH,gCArBhI,U,GArBSI,IAAMC,WCiChBI,G,6KA1BX,OAEE,6BACE,kBAAC,IAAD,KACE,6BACE,yBAAKT,GAAG,WACN,yBAAKC,UAAU,QAAO,4CACpB,wBAAIA,UAAU,UAAUD,GAAG,YACzB,4BAAI,kBAAC,IAAD,CAAMC,UAAU,WAAWS,GAAG,SAA9B,SACJ,4BAAI,kBAAC,IAAD,CAAMT,UAAU,WAAWS,GAAG,eAA9B,eACJ,4BAAI,kBAAC,IAAD,CAAMT,UAAU,WAAWS,GAAG,YAA9B,cAIV,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,SAASC,UAAaN,IAClC,kBAAC,IAAD,CAAOK,KAAK,cAAcC,UAAaL,IACvC,kBAAC,IAAD,CAAOI,KAAK,IAAIC,UAAWb,Y,GApBvBK,IAAMC,YCKJQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACT,kBAAC,IAAD,KACI,kBAAC,EAAD,OACcC,SAASC,eAAe,SDuHpC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a29870a4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/portfolioPhoto2.008a921e.jpg\";","import React from 'react';\r\n// import ReactDOM from 'react-dom';\r\nimport portfolioPhoto from '../imgs/proflephotos/portfolioPhoto2.jpg';\r\n\r\nclass Home extends React.Component {\r\n    render() { \r\n        return(\r\n            <div>\r\n                <header id=\"homeHeader\">\r\n                    <div className=\"center\">\r\n                        <img src ={portfolioPhoto} className=\"profilePhoto\" />\r\n                        <h2 id=\"txtName\">Neo Owens</h2>\r\n                        <h3 id=\"txtWorkTitle\">Software Developer</h3>\r\n                    </div>\r\n                </header>\r\n                <div className=\"mainContent\">\r\n                    <div className=\"container\" id=\"aboutMeContainer\">\r\n                        <h2 id=\"aboutMeHeader\">About Me</h2>\r\n                        <div className=\"col sm-col-9\" id=\"aboutMeDetail\">\r\n                        Experienced developer with 5+ years experience. Specializing in .NET web and console application development using ASP.NET, C#, and SQL Server. \r\n                        Searching for an opportunity to learn and apply new and emerging technologies. \r\n                        Experience as a developer has enhanced my ability to design, develop, test, and deploy console and web applications. \r\n                        </div>\r\n                        <div className=\"col sm-col-3\"></div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport { Home }","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nclass Contact extends React.Component {\r\n    render() { \r\n        return(\r\n            <div>\r\n                <h1>About...</h1>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport { Contact }","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nclass Experience extends React.Component {\r\n    render() { \r\n        return(\r\n            <div class=\"container\">\r\n                <div class=\"row justify-content-center\">\r\n                    {/* <h1>Projects...</h1> */}\r\n                    <div class=\"jobexperiencecontentdiv\"id=\"pesiexperiencediv\">\r\n                        <h3><strong>PARTNER ENGINEERING AND SCIENCE</strong></h3>\r\n                        <h5><strong>SOFTWARE DEVELOPER | SEPT 2017 – CURRENT</strong></h5>\r\n                        <section>\r\n                            <li>Design, develop, and test web and console applications using C#, ASP.NET, SQL Server Database, JavaScript, Node.JS, jQuery, and HTML.</li>\r\n                            <li>Modify existing software, sql server processes, and web applications for better efficiency and performance.</li> <br />\r\n                            <li>Develop ad-hoc queries, views, functions, and stored procedures to process data efficiently.</li> <br />\r\n                            <li>Develop, test, and maintain Windows Service application to monitor file activity in folders using C# and Visual Studios.</li> <br />\r\n                            <li>Designed, developed, and tested a timesheet web application for International employees to increase payroll processing efficiency using .NET Framework, C#, Javascript, HTML, and CSS.</li> <br />\r\n                            <li>Designed, developed, and tested a web application that calculates commission for project staff to be paid and stores data to be recalled.</li> <br />\r\n                            <li>Develop and maintain dynamic bookings and employee utilization reports for Ops Managers and Executives by importing data, creating data model, \r\n                            and creating interactive visuals for report pages.</li>\r\n                        </section>\r\n                    </div>{/*end of pesiexeriencediv */}\r\n                </div>{/*  end of row */}\r\n                <div class=\"row justify-content-center\">\r\n                    <div class=\"jobexperiencecontentdiv\" id=\"uhgexeriencediv\">\r\n                        <h3>UNITEDHEALTH GROUP</h3>\r\n                        <h5><strong>APPLICATION DEVELOPER | OCT 2015 – MARCH 2017</strong></h5>\r\n                        <div>\r\n                            <section>\r\n                                <li>Designed and maintained client side screens as well as claim processing  applications.</li> <br />\r\n                                <li>Collaborated with a team of analysts, developers, subject matter experts, and leaders for functional specifications and solutioning.</li> <br />\r\n                                <li>Developed unit test plans and manipulated data to test requirements and quality of product.</li><br />\r\n                                <li>Retrieved, stored, and manipulated data in a claims database.</li> <br />\r\n                                <li>Analyzed EDI 837 Institutional and Professional Health Care Claims.</li> <br />\r\n                                <li>Supported triage and resolution of defects to refine and improve quality using Application Life Cycle software.</li> <br />\r\n                            </section>\r\n                            <div><strong>SYSTEMS ANALYST | MAY 2014 – OCT 2015</strong></div>\r\n                            <section>\r\n                                Obtained, interpreted, and analyzed business requirements and issues. <br />\r\n                                Prepared and executed test cases to ensure the quality of claims processing applications. <br />\r\n                                Acted as the liaison between Business and Systems Analysts, Developers, and project management groups. <br />\r\n                                Performed documentation and communication activities for technical and business personnel. <br />\r\n                                Collaborated with a team of analysts, developers, subject matter experts, and leaders for solution assessment. <br />\r\n                                Developed Unit Test Plans to test coding changes and manipulate data to ensure desired results using debugger. <br />\r\n                                Supported triage and resolution of defects to refine and improve quality using Application Life Cycle software. <br />\r\n                            </section>\r\n                        </div>\r\n                    </div> {/*end of uhgexeriencediv */}\r\n                </div>\r\n     \r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport { Experience }","import React from 'react';\r\n// import { Redirect, history } from 'react-router';\r\nimport { BrowserRouter as Router, Route, Switch, Link, Redirect } from 'react-router-dom';\r\nimport { Home, Experience, Contact } from './pages/index';\r\n// import { createBrowserHistory } from \"history\";\r\nimport './App.css';\r\n\r\nclass App extends React.Component {\r\n  render(){\r\n\r\n    return(\r\n\r\n      <div>\r\n        <Router>\r\n          <div>\r\n            <nav id=\"sitenav\">\r\n              <div className=\"name\"><span>Neo Owens</span></div>\r\n                <ul className=\"navlist\" id=\"pNavList\">\r\n                  <li><Link className=\"nav-link\" to=\"/home\">Home</Link></li>\r\n                  <li><Link className=\"nav-link\" to=\"/experience\">Experience</Link></li>\r\n                  <li><Link className=\"nav-link\" to=\"/contact\">Contact</Link></li>\r\n                </ul>\r\n            </nav>\r\n\r\n            <Switch>\r\n              <Route path=\"/about\" component = {Contact} />\r\n              <Route path=\"/experience\" component = {Experience} />\r\n              <Route path=\"/\" component={Home}></Route>\r\n            </Switch>\r\n          </div>\r\n        </Router>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n<BrowserRouter>\r\n    <App />\r\n</BrowserRouter>, document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}